// Code generated by mockery 2.7.5. DO NOT EDIT.

package paypayopa

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockOpaClient is an autogenerated mock type for the opaClient type
type mockOpaClient struct {
	mock.Mock
}

// DELETE provides a mock function with given fields: ctx, path
func (_m *mockOpaClient) DELETE(ctx context.Context, path string) (*ResultInfo, error) {
	ret := _m.Called(ctx, path)

	var r0 *ResultInfo
	if rf, ok := ret.Get(0).(func(context.Context, string) *ResultInfo); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Do provides a mock function with given fields: req, res
func (_m *mockOpaClient) Do(req *http.Request, res interface{}) (*ResultInfo, error) {
	ret := _m.Called(req, res)

	var r0 *ResultInfo
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) *ResultInfo); ok {
		r0 = rf(req, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, interface{}) error); ok {
		r1 = rf(req, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GET provides a mock function with given fields: ctx, path, res
func (_m *mockOpaClient) GET(ctx context.Context, path string, res interface{}) (*ResultInfo, error) {
	ret := _m.Called(ctx, path, res)

	var r0 *ResultInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *ResultInfo); ok {
		r0 = rf(ctx, path, res)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, path, res)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// POST provides a mock function with given fields: ctx, path, res, req
func (_m *mockOpaClient) POST(ctx context.Context, path string, res interface{}, req interface{}) (*ResultInfo, error) {
	ret := _m.Called(ctx, path, res, req)

	var r0 *ResultInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *ResultInfo); ok {
		r0 = rf(ctx, path, res, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResultInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, path, res, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Request provides a mock function with given fields: ctx, method, path, req
func (_m *mockOpaClient) Request(ctx context.Context, method string, path string, req interface{}) (*http.Request, error) {
	ret := _m.Called(ctx, method, path, req)

	var r0 *http.Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *http.Request); ok {
		r0 = rf(ctx, method, path, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, interface{}) error); ok {
		r1 = rf(ctx, method, path, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
